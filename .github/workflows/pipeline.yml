name: Setup ESLint and Prettier

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Initialize npm
        run: npm init -y

      - name: Install ESLint globally
        run: npm install eslint@6.8.0 -g

      - name: Install Prettier globally
        run: npm install prettier@3.0.0 -g

      - name: Create ESLint configuration file
        run: |
          echo '{
          "env": {
            "browser": true,
            "es2021": true
          },
          "extends": [
            "eslint:recommended",
            "plugin:react/recommended",
            "prettier"
          ],
          "parserOptions": {
            "ecmaFeatures": {
              "jsx": true
            },
            "ecmaVersion": 12,
            "sourceType": "module"
          },
          "plugins": [
            "react",
            "prettier"
          ],
          "rules": {
            "prettier/prettier": "error",
            "semi": ["error", "never"],
            "quotes": ["error", "single"]
          }
          }' > .eslintrc.json

      - name: Create Prettier configuration file
        run: |
          echo '{
          "semi": false,
          "tabWidth": 2,
          "singleQuote": true
           }' > .prettierrc

      - name: Install ESLint and Prettier plugins
        run: npm install --save-dev eslint-config-prettier eslint-plugin-prettier

      - name: Update ESLint configuration with Prettier settings
        run: jq '.extends += ["prettier"] | .plugins = ["prettier"] | .rules["prettier/prettier"] = "error"' .eslintrc.json > temp.json && mv temp.json .eslintrc.json

      - name: Install Husky globally
        run: npm install husky -g

      - name: Install lint-staged globally
        run: npm install lint-staged -g

      - name: Update package.json with lint-staged configuration
        run: |
          jq '. + { "lint-staged": { "**/*.js": "npx eslint . --fix" } }' package.json > temp.json && mv temp.json package.json

      - name: Initialize Husky and install dependencies
        run: npx husky-init && npm install

      - name: Add pre-commit hook with lint-staged
        run: npx husky add .husky/pre-commit "npx lint-staged"

      - name: Install Commitizen
        run: npx commitizen init cz-conventional-changelog --save-dev --save-exact

      - name: Install Commitlint
        run: npm install -D @commitlint/{cli,config-conventional} --save-exact

      - name: Create Commitlint configuration file
        run: |
          echo '{ "extends": ["@commitlint/config-conventional"] }' > .commitlintrc.json

      - name: Add commit-msg hook for Commitlint
        run: npx husky add .husky/commit-msg 'npx --no -- commitlint --edit "$1"'

      - name: Add prepare-commit-msg hook for Commitizen
        run: npx husky add .husky/prepare-commit-msg "exec < /dev/tty && node_modules/.bin/cz --hook || true"

      - name: Add Commitizen script to package.json
        run: jq '.scripts["cz"] = "cz"' package.json > temp.json && mv temp.json package.json

      - name: Install Standard Version globally
        run: npm install --save-dev standard-version -g

      - name: Add Standard Version script to package.json
        run: jq '.scripts["release"] = "standard-version "' package.json > temp.json && mv temp.json package.json

      - name: Add minor release script to package.json
        run: jq '.scripts["release:minor"] = "standard-version --release-as minor"' package.json > temp.json && mv temp.json package.json

      - name: Add patch release script to package.json
        run: jq '.scripts["release:patch"] = "standard-version --release-as patch"' package.json > temp.json && mv temp.json package.json

      - name: Add major release script to package.json
        run: jq '.scripts["release:major"] = "standard-version --release-as major"' package.json > temp.json && mv temp.json package.json
 
      - name: Create index.js
        run : |
          echo '{
            (function (exports) {
             function greet(name) {
               const options = {
                 second: 'numeric',
                   minute: 'numeric',
                   hour: 'numeric',
                   day: 'long',
                   month: 'long',
                   year: 'numeric',
        
                 }
  
           let now = new Date();
           const formattedDate = now.toLocaleDateString('en-US', options);
           return `Hello, ${name}! Today is ${formattedDate}.`
           }
  
          exports.greet = greet
           })(this);
          }'

      - name: Create .gitignore
        run: |
          echo '{
          node_modules
          .env
          }'
      
      - name: git add
        run: git add .

      - name: git commit
        run: git commit -m "first commit"
      
      - name: push
        run: git push origin main

    
        
      - name: Run initial release
        run: npm run release -- --first-release